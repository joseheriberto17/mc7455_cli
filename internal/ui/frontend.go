package ui

import (
	"fmt"
	"os"

	"github.com/olekukonko/tablewriter"
	"github.com/olekukonko/tablewriter/renderer"
)

// Frontend encapsula los datos necesarios para imprimir la tabla de diagnÃ³stico
// en consola. El mÃ©todo Render genera una salida ASCII uniforme utilizando
// tablewriter.
//
//  ðŸ“‹ Ejemplo de uso desde main:
//
//      tbl := ui.Frontend{
//          Title: "DiagnÃ³stico MC7455 â€“ visiÃ³n general",
//          Head:  []string{"Chequeo", "Valor", "OK?"},
//          Rows:  ui.BuildRows(rep),
//      }
//      tbl.Render()
//
// De esta forma `main.go` solo necesita proveer el tÃ­tulo, encabezados y las filas
// construidas â€”Â toda la lÃ³gica para ordenar, formatear y pintar la tabla queda
// contenida en el paquete ui.
//
// Cualquier cambio en la estÃ©tica o la agrupaciÃ³n de datos puede realizarse aquÃ­
// sin tocar el resto de la aplicaciÃ³n.

type Frontend struct {
	Title string
	Head  []string
}

func (f Frontend) RenderTitle() {
	fmt.Println("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€")
	fmt.Println(f.Title)
	fmt.Println("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€")
}

// Render imprime la tabla en la salida estÃ¡ndar con un tÃ­tulo centrado y un marco
// uniforme.
func (f Frontend) Render(Rows [][]string) {

	tbl := tablewriter.NewTable(os.Stdout,
		tablewriter.WithRenderer(renderer.NewBlueprint()), // salida ASCII
	)
	tbl.Header(f.Head)
	tbl.Bulk(Rows)
	tbl.Render()
	fmt.Println("")
}
